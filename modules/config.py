"""
Configuration module for Vertex AI Vector Search.

This module handles environment variables, service account authentication,
and provides configuration settings for the vector search operations.
"""

import os
import json
from typing import Optional
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()


class Config:
    """Configuration class for Vertex AI Vector Search settings."""
    
    def __init__(self):
        """Initialize configuration with environment variables."""
        # Google Cloud Configuration
        self.project_id = os.getenv("GOOGLE_CLOUD_PROJECT_ID")
        self.location = os.getenv("GOOGLE_CLOUD_LOCATION", "us-central1")
        
        # Service Account Configuration
        self.service_account_path = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")
        
        # Vertex AI Vector Search Configuration
        self.index_id = os.getenv("VECTOR_INDEX_ID")
        self.endpoint_id = os.getenv("VECTOR_ENDPOINT_ID")
        
        # Embedding Model Configuration
        self.embedding_model = os.getenv("EMBEDDING_MODEL", "textembedding-gecko@003")
        self.embedding_batch_size = int(os.getenv("EMBEDDING_BATCH_SIZE", "100"))
        self.embedding_max_tokens = int(os.getenv("EMBEDDING_MAX_TOKENS", "3072"))
        
        # Processing Configuration
        self.batch_size = int(os.getenv("BATCH_SIZE", "100"))
        self.max_retries = int(os.getenv("MAX_RETRIES", "3"))
        self.request_timeout = int(os.getenv("REQUEST_TIMEOUT", "300"))
        
        # Logging Configuration
        self.log_level = os.getenv("LOG_LEVEL", "INFO")
        
    def validate(self) -> bool:
        """
        Validate that required configuration values are present.
        
        Returns:
            bool: True if all required values are present, False otherwise.
        """
        required_fields = ["project_id", "index_id"]
        missing_fields = [field for field in required_fields 
                         if not getattr(self, field)]
        
        if missing_fields:
            raise ValueError(f"Missing required configuration: {missing_fields}")
        
        return True
    
    def get_index_path(self) -> str:
        """
        Get the full path for the vector index.
        
        Returns:
            str: Full path to the vector index.
        """
        return f"projects/{self.project_id}/locations/{self.location}/indexes/{self.index_id}"
    
    def get_endpoint_path(self) -> Optional[str]:
        """
        Get the full path for the vector endpoint if available.
        
        Returns:
            Optional[str]: Full path to the vector endpoint or None.
        """
        if self.endpoint_id:
            return f"projects/{self.project_id}/locations/{self.location}/indexEndpoints/{self.endpoint_id}"
        return None
    
    def setup_authentication(self) -> None:
        """
        Setup Google Cloud authentication using service account.
        
        Raises:
            FileNotFoundError: If service account file doesn't exist.
            ValueError: If service account path is not configured.
        """
        if not self.service_account_path:
            raise ValueError("GOOGLE_APPLICATION_CREDENTIALS not configured")
        
        service_account_file = Path(self.service_account_path)
        if not service_account_file.exists():
            raise FileNotFoundError(f"Service account file not found: {self.service_account_path}")
        
        # Set environment variable for Google Cloud authentication
        os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = str(service_account_file.absolute())
        
        # Validate service account file
        try:
            with open(service_account_file, 'r') as f:
                credentials = json.load(f)
                required_fields = ['type', 'project_id', 'private_key_id', 'private_key', 'client_email']
                missing_fields = [field for field in required_fields if field not in credentials]
                if missing_fields:
                    raise ValueError(f"Invalid service account file. Missing fields: {missing_fields}")
        except json.JSONDecodeError:
            raise ValueError("Invalid JSON in service account file")
    
    def get_embedding_dimension(self) -> int:
        """
        Get the dimension of embeddings generated by the model.
        
        Returns:
            int: The embedding dimension.
        """
        model_dimensions = {
            "textembedding-gecko@003": 768,
            "textembedding-gecko@002": 768,
            "textembedding-gecko@001": 768,
            "textembedding-gecko-multilingual@001": 768
        }
        
        return model_dimensions.get(self.embedding_model, 768)


# Global configuration instance
config = Config() 